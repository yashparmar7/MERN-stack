Middlewares :
=============
- it is an intermediary (link)


Request ---------------->   Middleware ----------------> Response

in Express :
============
- it is a function that takes 3 arguments (req, res, next)
- Middleware in express are function that comes into play after server receives the request and before the response is sent to the client.

Common middleware functions :
=============================
- methodOverride
- bodyParser
- express.static 
- express.urlencoded

What do middlewares do?
==========================

= middleware function perform the following tasks:

- Execute any code.
- Makes change to the request and response object
- End the request-response cycle.
- call the next middleware function in the stack



Create middleware :
=====================

app.use(middleware)

ex:
app.use(bodyParser.json())

app.use((req,res)=>{
    console.log("Hello from middleware");
})



Using next:
================
- The next middleware function is commonly denoted by a variable named next.

app.use((req,res,next)=>{
    console.log('Time', Date.now());
    next();
})


- If the current middleware function does not end the request-response cycle, It must be call next() to pass control to the next middleware function.



Types of middleware :
=====================
- Application-level middleware: These middleware functions are applied to all incoming requests to an Express application.
- Router-level middleware: These middleware functions are applied to all incoming requests to a specific router.
- Error-handling middleware: These middleware functions are applied to all error requests to an Express application.
- Built-in middleware: These middleware functions are provided by Express and can be used to perform common tasks
- Third-party middleware: These middleware functions are provided by third-party libraries and can be used to perform
                          common tasks.





Handling Errors :
==================

- Express default Error Handling


Custom :
================
- Error handling middleware

app.use((err,req,res,next)->{
    console.log("-----------ERROR----------");
    next(err);
})


Using Create Error class :
==========================
- Create a custom error class that extends the Error class.
- Use the error class to create an error object.

ex :
=====

class ECustomError extends Error {
  constructor(status, message) {
    super();
    this.status = status;
    this.message = message;
  }
}

Defualt status and message for throw error:
=====================================

app.use((err,req,res,next)->{
   let {status= 500, message= "Some Error Occurred"} = err;
   res.status(status).send(message);
})



Handling Async Errors:
=====================

app.get("/chats/:id",async(req,res,next)=>{
    let {id}= req.params;
    let chat = await Chat.findById(id);
    if(!chat){
       return next(new CustomError(404,"Chat not found"));
        }
      res.render("edit.ejs",{chat})
})


Using try..Catch 
==================
- Wrap the code in a try block.
- Catch the error in the catch block.
- Use the next() function to pass the error to the error-handling middleware.
- Use the res.status().send() method to send a response to the client.


Using wrapAsync function :
==========================
ex:
----
function asyncWrap(fn) {
  return function (req, res, next) {
    fn(req, res, next).catch((err) => next(err));
  };
}

