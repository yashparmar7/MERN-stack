REST :
- Representational State Transfer
- REST is an architectural style that define a set of constraints (rules) to be used for creating web services.
- REST is based on the idea of resources, which are identified by URIs, and can be manipulated using a fixed set of operations (GET, POST, PUT, DELETE).



RESTful API :
- A RESTful API is an API that follows the REST architectural style.
- It is a web service that uses HTTP requests to interact with resources on the server.
- A RESTful API is designed to be stateless, cacheable, and scalable.
- It uses HTTP methods (GET, POST, PUT, DELETE) to perform operations on resources. also used in CRUD operations.


RESTful API rules :

1. Use HTTP Methods Properly:
   - GET     → Retrieve data
   - POST    → Create new data
   - PUT     → Update entire resource
   - PATCH   → Update part of resource
   - DELETE  → Delete resource

2. Use Nouns in URLs, Not Verbs:
   - Correct: /users
   - Wrong:   /getUsers

3. Use Plural Nouns for Resource Names:
   - Example: /products, /orders, /students

4. Use Nested URLs for Sub-resources:
   - Example: /users/1/orders/23

5. Use Proper HTTP Status Codes:
   - 200 OK                 → Success
   - 201 Created            → Resource created
   - 204 No Content         → Successfully deleted
   - 400 Bad Request        → Invalid client request
   - 401 Unauthorized       → Not authenticated
   - 403 Forbidden          → Access denied
   - 404 Not Found          → Resource doesn't exist
   - 500 Internal Server Error → Server issue

6. Use JSON as the Default Response Format:
   - Response header: Content-Type: application/json

7. Support Filtering, Sorting, and Pagination:
   - Example: /products?category=books&sort=price&page=2&limit=10

8. Implement Authentication and Authorization:
   - Use API keys, JWT, or OAuth 2.0

9. Make the API Stateless:
   - Each request must contain all necessary info
   - Server should not store client state

10. Version Your API:
    - Example: /api/v1/users

11. Provide Meaningful Error Messages:
    - Example JSON:
      {
        "error": "Invalid input",
        "code": 400
      }



CRUD Operations :

- GET : retrieves resources
- POST : creates resources / submit new data to server
- PUT : updates resources / updates existing data 
- PATCH : updates existing data partially 
- DELETE : deletes resources / removes data




For Projects :

Create RESTful APIs :

GET :  /posts   - to get data for all posts
POST : /posts   - to adda new posts
PUT : /posts/:id - to get one post (using id)
PATCH : /posts/:id - to update specific posts
DELETE : /posts/:id - to delete specific post




Note :

Create Id :

UUID package : Universally unique identifier
- npm i uuid



Conver one method to another method on html form :

USE 
method-override package :
- npm i method-override












For Practice :
stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/
