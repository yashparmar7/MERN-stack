React  :
=======

- JS Library for creating UI

Documentation link : https://react.dev/

Notes : https://react-js-notebook.vercel.app/



Create user interfaces from components :  - Component is a reusable & independent piece of code.
========================================
React lets you build user interfaces out of individual pieces called components. Create your own React components like Thumbnail, LikeButton, and Video. Then combine them into entire screens, pages, and apps.

example :
========

function Video({ video }) {
  return (
    <div>
      <Thumbnail video={video} />
      <a href={video.url}>
        <h3>{video.title}</h3>
        <p>{video.description}</p>
      </a>
      <LikeButton video={video} />
    </div>
  );
}


JSX : (JavaScript Extension Syntax) 
===== =============================
- It lets us write HTML directory inside JS.
- JSX are not real JavaScript file.

JSX ----> Bubel(Internal tool) Transpile -----> JS


Set Up Local Environment :
==========================

Create-React-App     v/s   Vite

npm create vite@letest

npm run dev //to start server


Note :  Interview On React (4 Reasons Why You Should Prefer Vite Over Create-React-App (CRA))

https://semaphore.io/blog/vite


Vite means : Quick/Fast (in franch)




Flow of File Structure :
========================

index.html -----> main.jsx <----- App.jsx
                      |
                      |
 (root)  <------------|(App component)



Import & Export :
=================
In summary, named exports are useful when you want to export multiple values and import them with their specific names, while default exports are handy for exporting a single value and giving it a custom name when importing. The choice between the two depends on the structure and requirements of your codebase.

Import :
--------

import Title from "./Title.jsx";

Default Export :
----------------

export default Title;

Named Export :
--------------

export { Title };
import { Title } from "./Title.jsx";



Write MarkUp in JSX : (Rules)
=====================
- Return a single root element
- Close all the tags 
- camelCase most of the things


React Fragment : ( <> </> )
================
- Fragment let you group a list of children without adding extra nodes to the DOM.


JavaScript in JSX with Curly Braces :
=====================================
JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to open a window to JavaScript.

Example :
---------

export default function TodoList() {
  const name = 'Gregorio Y. Zara';
  return (
    <h1>{name}'s To Do List</h1>
  );
}

