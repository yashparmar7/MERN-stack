React  :
=======

- JS Library for creating UI

Documentation link : https://react.dev/

Notes : https://react-js-notebook.vercel.app/



Create user interfaces from components :  - Component is a reusable & independent piece of code.
========================================
React lets you build user interfaces out of individual pieces called components. Create your own React components like Thumbnail, LikeButton, and Video. Then combine them into entire screens, pages, and apps.

example :
========

function Video({ video }) {
  return (
    <div>
      <Thumbnail video={video} />
      <a href={video.url}>
        <h3>{video.title}</h3>
        <p>{video.description}</p>
      </a>
      <LikeButton video={video} />
    </div>
  );
}


JSX : (JavaScript Extension Syntax) 
===== =============================
- It lets us write HTML directory inside JS.
- JSX are not real JavaScript file.

JSX ----> Bubel(Internal tool) Transpile -----> JS


Set Up Local Environment :
==========================

Create-React-App     v/s   Vite

npm create vite@latest

npm run dev //to start server


Note :  Interview On React (4 Reasons Why You Should Prefer Vite Over Create-React-App (CRA))

https://semaphore.io/blog/vite


Vite means : Quick/Fast (in franch)




Flow of File Structure :
========================

index.html -----> main.jsx <----- App.jsx
                      |
                      |
 (root)  <------------|(App component)



Import & Export :
=================
In summary, named exports are useful when you want to export multiple values and import them with their specific names, while default exports are handy for exporting a single value and giving it a custom name when importing. The choice between the two depends on the structure and requirements of your codebase.

Import :
--------

import Title from "./Title.jsx";

Default Export :
----------------

export default Title;

Named Export :
--------------

export { Title };
import { Title } from "./Title.jsx";



Write MarkUp in JSX : (Rules)
=====================
- Return a single root element
- Close all the tags 
- camelCase most of the things


React Fragment : ( <> </> )
================
- Fragment let you group a list of children without adding extra nodes to the DOM.


JavaScript in JSX with Curly Braces :
=====================================
JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to open a window to JavaScript.

Example :
---------

export default function TodoList() {
  const name = 'Gregorio Y. Zara';
  return (
    <h1>{name}'s To Do List</h1>
  );
}



React Props :
=============
- Props are the information that you pass to a JSX tag.

<Product title="phone" price="30k" />
<Product title="laptop" price={40000}/>


export default function Product({ title, price }) {
return (
<div className="Product">
<h4>{title}</h4>
<p>{price}</p>
)}


Passing Array to props:
=======================

features = {["fast","reliable"]}

features = {{ a:"fast",b:"reliable"}}

<Product Title="Laptop" Price={30000} feature={option} />


Renderig Array :
================
- we will use map method to render all array list item in browser.

      <p>
        Feature :{" "}
        {feature.map((feature) => (
          <li>{feature}</li>
        ))}
      </p>


Conditionals :
==============
- Adding elements on the  basis os some condition.


      {Price > 10000 ? <p>"Discount of 5%" </p> : null}

      {Price > 10000 && <p>Discount of 5%</p> }


Dynamic Component Styling :
===========================

  let style = { backgroundColor: isDiscount && "yellow" };

   <div className="product" style={style}> </div>


Event in React :
===============
- Handling Click Events 

function doSomething() {
console.log("button was clicked");
}

export default function Button() {
return (
<div>
<button onClick={doSomething}>Click me!</button>
</div>
);
}




- Handling Non-Click Events 

function handleHover() {
console.log("Hover");
}

export default function Button() {
return (
<div>
<button onMouseOver={handleHover}>Hover me!</button>
</div>
);
}


Event Object:
=============
- We can access the Event Object in Handler

function handle FormSubmit(event) {
event.preventDefault();
console.log("form was submitted");
}

export default function Form() {
return (
<form onSubmit={handleFormSubmit}>
| <button>Submit</button>
</form>
);
}



State in React :
===============
- The state is a built-in react object that is used to contain data or information about the component.
- A component's state can change over time ; whenever it changes, the component re-renders.



Hooks :
========
- Hooks are a new addition in react 16.8
- They let you use state and other React features without writing class.



useState() :
===========
- useState is a React Hook that lets you add a state variable to your component.

const [state, setState] = useState(initialState);


- useState returns an array with exactly two values:

1. The current state. During the first render, it will match the initialState you have passed.
2. The set function that lets you update the state to a different value and trigger a re render.



Closure :
=========
- A closure is a feature in JavaScript where an inner function has access to the other (enclosing) function's variables.

* in Js, once a function completes its execution , any variable that were defined inside the function scope cease to exist.


function outer(){

  var b = 10;

  function inner(){
    var a= 20;
    console.log(a+b);
  }
  return inner;
}



Re-render : (How it works?)
===========================

What is Re-rendering?
=====================
Re-rendering means React is gonna re-run your component‚Äôs function to update the UI when the state or props change.


When Does a Component Re-render?

State changes (useState) :
==========================
If you update a state variable with setState, the component re-renders.
const [count, setCount] = useState(0);
// re-render happens here üëá
setCount(1);


Props change :
=============
If a parent component gives new props to a child ‚Üí boom, re-render.

<Child name="Yash" /> // if "name" changes ‚Üí child re-renders


Example :
=========

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <h1>{count}</h1> {/* ‚Üê will re-render on count change */}
      <button onClick={() => setCount(count + 1)}>Click Me</button>
    </div>
  );
}




Callback in Updater Function (Set State) :
==========================================

setCount(count + 1);
- It might break if multiple setCount calls run quickly ‚Äî because state updates are async & batched.

setCount((prevCount) => prevCount + 1);
- Here, prevCount is guaranteed to be the latest value, even if multiple state updates happen at once.

Example :
=========

const Counter = () => {
  let [count, setCount] = useState(0); // initializes

  function incCount() {

    setCount((currVal) => {              // use callback in setCount 
      return currVal + 1;
    });
    setCount((currVal) => {
      return currVal + 1;
    });
  }
  return (
    <div>
      <h1>Count : {count}</h1>
      <button onClick={incCount}>Inc Count</button>
    </div>
  );
};



Note :

setCount(count + 1)        -	Simple updates, not back-to-back
setCount(prev => prev + 1) -  When next value depends on old one (safe & recommended)



Note for State :
================
- If a state value changes, the component re-renders.
= If the state value is same as before, React skips the re-render. 



Object & State :
===============

Using an object as state (like in your Ludo game):
-------------------------------------------------
const [moves, setMoves] = useState({
  blue: 0,
  yellow: 0,
  red: 0,
  green: 0,
});


Now you can access values like:
--------------------------------
moves.blue  // 0


And update it safely using:
---------------------------
setMoves((prevMoves) => ({
  ...prevMoves,
  blue: prevMoves.blue + 1,
}));

Note :
=====
(...)  use spread operator


üö´ Don‚Äôt Do This:
------------------
moves.blue += 1;
setMoves(moves); // ‚ùå Mutates original object, breaks React's state tracking


‚úÖ Always:
-----------
setMoves((prev) => ({
  ...prev,
  blue: prev.blue + 1,
}));


Array & State :
===============



Functions as Props :
====================

- JS function are 1st class object
- they means they can be passed to be function as argument, returned from it & assigned to a variable.


