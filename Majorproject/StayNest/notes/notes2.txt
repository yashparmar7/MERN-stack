Authentication :
- Authentication is the process of verifying who someone is


Authorization :
- Authorization is the process of verifying what specific application, files, and data a user has access to



Store Password :
- We naver store the password as it is. We store their hashed form.



Password                                                                how it is stored 
                    -------->   Hashing Function  ---------->        
"HelloWorld"                                                        "936a185caaa845dc5dc5c8w2ada12d12"




Hashing :

- For every input, there is a fixed output.
- They are one-way functions, we can't get input from output.
- For a different input, there is a different output but of same length.
- Small changes in input should bring large changes in output


Hashing functions : 

SHA256
MD5
CRC
bcrypt


Salting :
- Password salting is a technique to protect password stored in databases by adding a string 32 or more characters and then hashing them.



Passport.js :  website check in 

npm i passport

npm i passport-local 

npm i passport-local-mongoose




Configurig Stratagy :
=====================

passport.initialize()
- a middleware that initialize passport.


passport.session() 
- A web application need the ability to identify users as they browser from page to page. This series of requests and response, each associated with the same user, is known as session.


passport.use(new LocalStrategy(User.authenticate()))

passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());

Note :
======
*authenticate() Generates a function that is used in Passport's LocalStrategy
*serializeUser() Generates a function that is used by Passport to serialize users into the session
*deserializeUser() Generates a function that is used by Passport to deserialize users into the session


Demo User :
==========

app.get("/registerUser", async (req, res) => {
    let fakeUser = new User({
    email: "student@gmail.com",
    username: "delta-student",
});
    let newUser = await User.register(fakeUser, "helloworld");
    res.send(newUser);
});

register(user, password, cb) :
=============================
-Convenience method to register a new user instance with a given password. Checks if username is unique. See login example.



Connecting login route :

-How to check if user is logged in ?

req.isAuthenticated() // passport method


Logout :
========

req.logout(callback) :


Login after Signup :
====================
- passport's login method automatically establishes a login session.
- we can invoke login to automatically login user.

req.login(user, callback) :