Form Validation :
Form validation is a crucial step in ensuring data integrity and security.
It helps prevent malicious data submissions and enhances user experience by providing immediate feedback.
Ensure that all input data meets the required criteria before processing.

Client side:
===========
Implement form validation using JavaScript to check for empty fields, correct data formats, and enforce any additional rules specific to the application.

Server side:
============
Implement validation logic to verify incoming data against the expected schema, returning appropriate error messages for any discrepancies.



Use Bootstrap validation 
==========================
==========================




Joi tool :
==========
to validate are schema .
Joi is a powerful schema description language and data validator for JavaScript, allowing you to define complex validation rules with ease.


$pull : delete review
======
The pull operator removes from an exisiting array all instances of a values that match a specified comdition. 



Express router :
================
- Express router are a way to organize your Express application such that our primary app.js file. does not become loaded.


const router = express.Router() // create new router object


mergeParams :   
============
- This feature is available on express version 4.5.0 and above. You need to pass mergeParams as true if you want to access params from the Parent route via the child route.

const router = express.Router({ mergeParams: true })


Cookies :
=========
- HTTP cookies are small blocks of data created by a web server while a user is browsing a website and placed on the user's computer or other device by the user's web browser.


How to send cookies in express?
==================================

app.get("/setcookies  / getcookies",(req,res)=>{
    res.cookie("greet","namste");
    res.cookie("origin","India");
    res.send("We sent you a cookies");
});


Cookie-Parser (read)  : (Package)
================================
- we have not pass the cookie directly in root, so we can use cookie-parser middleware package. 

const cookieParser = require(" cookie-parser ");
app.use(cookieParser());

app.get("/getcookies",(req,res)=>{
    console.dir(req.cookies);
    res.send("got the cookies");
});

app.get("/getcookies",(req,res)=>{
    let{ name= "anonymous" }= req.cookies;
    res.send(`Hi, ${name}`);
});



Signed Cookies :
================
- Signed Cookie are the tricks to check send cookies are original or not.
- Indicates if the cookies should be signed.

- Send Signed Cookies

app.use(cookieParser("secretcode"));

app.get("/getsignedcookies",(req,res)=>{
    req.cookie("color","red", {signed :true})
    res.send("done!");
});

- Verify Signed Cookie

app.get("/verify",(req,res)=>{
    res.send(req.signedCookies);
});



What is State :
===============

Stateful Protocol :
-------------------
- Stateful Protocol require server to save the status and session information.
eg : ftp

Stateless Protocol:
-------------------
- It's does not require the server to retain the server information or 
eg : http


Express Session :
- An attempt to make our session stateful.


express-session : (npm package) :
*******************************


const session = require("express-session");

app.use(session({
  secret: 'keyboard cat',
  resave: false,
  saveUninitialized: true,
  cookie: { secure: true }
}))



secret :
=======
Required option

This is the secret used to sign the session ID cookie. The secret can be any type of value that is supported by Node.js crypto.createHmac (like a string or a Buffer). This can be either a single secret, or an array of multiple secrets. If an array of secrets is provided, only the first element will be used to sign the session ID cookie, while all the elements will be considered when verifying the signature in requests. The secret itself should be not easily parsed by a human and would best be a random set of characters. 

resave:
=======

Forces the session to be saved back to the session store, even if the session was never modified during the request. Depending on your store this may be necessary, but it can also create race conditions where a client makes two parallel requests to your server and changes made to the session in one request may get overwritten when the other request ends, even if it made no changes (this behavior also depends on what store you're using).

The default value is true.

saveUninitialized:
===================

Forces a session that is "uninitialized" to be saved to the store. A session is uninitialized when it is new but not modified. Choosing false is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing false will also help with race conditions where a client makes multiple parallel requests without a session.
The default value is true.



Connect-flash :
=============== 
- The flash is a special are of the session used for storing messages. Messages are written to the flash and cleared after being displayed to the user.

connect-flash (npm package)
***************************


Adding cookies :
================

app.use(session({
  secret: 'keyboard cat',
  resave: false,
  saveUninitialized: true,
  cookie: { 
    expires : Date.now() + 1000 * 60 * 60 * 24 * 3,
    maxAge : 1000 * 60 * 60 * 24 * 3,
    httpOnly: true 
   },
}));

