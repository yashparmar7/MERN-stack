

Relation Ship : (via foreign key)
===============

- One to One :
- Each record in one table is linked to a single record in another table.
example :
One country ---> One PM


- One to Many
- Each record in one table can be linked to multiple records in another table.
example: 
One author ---> Many books
One user ----> Many insta post

-Many to Many
- Each record in one table can be linked to multiple records in another table, and vice versa.
Example:
Many students ---> Many courses
Many products ---> Many categories



Note :
======
What is Cardinality :
- In DBMS, cardinality refers to the number of elements in a set, particularly in relation to database tables and the relationships between them.
- It helps define how data is related and can impact the design of the database schema.




Monogo Relationship :
=====================


One to Many :  /  Approach 1 (one to few)
=============  =  =======================
- store the child document inside parent 

Example :
--------- 

const userSchema = new mongoose.Schema({
  username: String,
  addresses: [
    {
      _id: false,
      location: String,
      city: String,
    },
  ],
});

const User = mongoose.model("User", userSchema);

const addUsers = async () => {
  const user = new User({
    username: "Om Gohil",
    addresses: [
      {
        location: "123 Main St",
        city: "AnTown",
      },
    ],
  });
  user.addresses.push({
    location: "456 Another St",
    city: "OtherTown",
  });
  let result = await user.save();
  console.log(result);
};

addUsers();




One to Many / Approach 2
=========== = ==========
- store a reference to the child document inside parent


- to store object Id we use this type in schema :

      type: mongoose.Schema.Types.ObjectId,
      ref: "Order", // model name


Example :
-------

const orderSchema = new mongoose.Schema({
  item: String,
  price: Number,
});

const customerSchema = new mongoose.Schema({
  name: String,
  orders: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Order", // model name
    },
  ],
});

const Order = mongoose.model("Order", orderSchema);

const Customer = mongoose.model("Customer", customerSchema);

const addCustomer = async () => {
  const customer = new Customer({
    name: "Puja rajput",
  });

  let order1 = await Order.findOne({ item: "Coffee" });
  let order2 = await Order.findOne({ item: "Oil" });

  customer.orders.push(order1);
  customer.orders.push(order2);

  let res = await customer.save();
  console.log(res);
};

// addCustomer();

const addOrders = async () => {
  let res = await Order.insertMany([
    {
      item: "Coffee",
      price: 299,
    },
    {
      item: "Flour",
      price: 500,
    },
    {
      item: "Oil",
      price: 1950,
    },
  ]);
  console.log(res);
};

// addOrders();



Using Populate :
===============
Population is the process of automatically replacing the specified paths in the document with document(s) from other collection(s). We may populate a single document, multiple documents, a plain object, multiple plain objects, or all objects returned from a query. Let's look at some examples.


Example :
---------
const findCustomer = async () => {
  let res = await Customer.find({}).populate("orders");
  console.log(res);
};

findCustomer();



One to Many / Approach : 3 (one to squillions)
=========== = ============ ===================
- Store a reference to the parent document inside child

Example:
--------

const mongoose = require("mongoose");

main()
  .then(() => {
    console.log("Connected to the database");
  })
  .catch((err) => console.log(err));

async function main() {
  await mongoose.connect("mongodb://127.0.0.1:27017/relationship");
}

const userSchema = new mongoose.Schema({
  username: String,
  email: String,
});

const postSchema = new mongoose.Schema({
  content: String,
  like: Number,
  user: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
    },
  ],
});

const User = mongoose.model("User", userSchema);
const Post = mongoose.model("Post", postSchema);

const addData = async () => {
  //   const user1 = new User({
  //     username: "puja_rajput_9968",
  //     email: "pujarajput9968@gmail.com",
  //   });
  //     await user1.save();

  //   let post1 = new Post({
  //     content: "I love you!",
  //     like: 5800,
  //   });

  //   post1.user = user1;
  //   await post1.save();

  let user = await User.findOne({ username: "puja_rajput_9968" });

  let post2 = new Post({
    content: "Hello Yash",
    like: 8547,
  });

  post2.user = user;
  await post2.save();
};

addData();







NOTE :

Read MongoDB document : 6 rules of thumb for mongoDB schema



Handling Deletion : using mongoose middlewares
==============================================

we can use 2 middlewares:
   pre:  run before the query is execute
   post: run after the query is execute

Note : if we use findByIdAndDelete then mongoose automatically trigger findOneAndDelete. 

Schema.pre("findOneAndDelete", async()=>{
  console.log("Pre Middlewares");
})

