BSON DATA: Binary JSON

---------------------------------------------------------------------------------------
| Feature             | JSON                          | BSON                          |
---------------------------------------------------------------------------------------
| Format              | Text-based                    | Binary-based                  |
| Readability         | Human-readable                | Not human-readable            |
| Speed (Parsing)     | Slower                        | Faster                        |
| File Size           | Smaller                       | Larger (due to metadata)      |
| Data Types          | Limited (e.g., string, number)| Richer (e.g., Date, ObjectId) |
| Use Case            | APIs, configs                 | MongoDB internal storage      |
| Supports Comments   | No                            | No                            |
| Easily Editable     | Yes                           | No                            |
| Language Support    | Widely supported              | Mostly used with MongoDB      |
---------------------------------------------------------------------------------------


Collection :
============
- A collection is a group of documents in a MongoDB database. It is similar to a table in a relational database management system.

documents : mongo stores data in form of documents. (BSON docs)

collection : MongoDB stores documents in collection.


CRUD Operation in MongoDB :
==========================

INSERT in DB :
----------------
- Insert operation is used to add a new document to a collection in MongoDB.
- The insert operation can be performed using the insertOne() method of the collection object.
- The insertOne() method takes a document as an argument and inserts it into the collection.
- The insertOne() method returns a result object that contains the inserted document and an acknowledgement of the insert operation.

- The insertMany() method is used to insert multiple documents into a collection in MongoDB.
- The insertMany() method takes an array of documents as an argument and inserts them into the collection
- The insertMany() method returns a result object that contains the inserted documents and an acknowledgement of theinsert operation.


syntax :
********
db.collection.insertOne() // insert a single document into a collection
db.collection.insertMany() // insert multiple documents into a collection  
db.collection.find() // to show collection data



example :
**********
db.students.insertOne({name: "John", age: 20})
db.students.insertMany([{name: "John", age: 20}, {name: "Alice", age: 22}])


note : if collection does not exists, MongoDB creates the collection when you first store data for that collection.




FIND in DB :
----------------
- The find() method is used to retrieve documents from a collection in MongoDB.
- The find() method takes a query as an argument and returns a cursor (reference to original)that can be used to iterate over the documents that match the query.
- The find() method returns a cursor object that can be used to iterate over the documents that match the query.
- The find() method can be used to retrieve all documents in a collection or to retrieve documents that match a specific query.

syntax:
********
db.collection.find() // to show collection data
db.collection.find({key:value}) // to show collection data that match the query
db.collection.find({key1:value1, key2:value2}) // to show collection data that match the query
db.collection.findOne() // to show first document

example :
**********
db.students.find()
db.students.find({name: "John"})    
db.students.find({name: "John, age : 20"})    
db.students.findOne({name: "John"})


Query Operators :
-----------------

comparision :
----------------
- $eq : equal to
- $ne : not equal to
- $gt : greater than
- $lt : less than
- $gte : greater than or equal to
- $lte : less than or equal to
- $in : value in array
- $nin : value not in array

example :
**********
db.students.find({age:{$gt:20}}) // to show students with age greater than
db.students.find({age:{$lt:20}}) // to show students with age less than
db.students.find({age:{$gte:20}}) // to show students with age greater than
db.students.find({age:{$lte:20}}) // to show students with age less than
db.students.find({age:{$in:[20,30,40]}}) // to show
db.students.find({age:{$nin:[20,30,40]}}) // to show



logical :
----------------
- $and : logical and
- $or : logical or
- $not : logical not
- $nor : logical nor

example :
**********
db.students.find({$and:[{age:{$gt:20}},{name:{$eq: "John"}}]}) // to show students with age greater than 20 and name John
db.students.find({$or:[{age:{$gt:20}},{name:{$eq: "John"}}]}) // to show students with age greater than 20 or name John


element :
----------------
- $type : data type
- $exists : 

example :
**********
db.students.find({age:{$type: "int"}}) // to show students with age as int


Array :
----------------
- $all : all elements in array
- $elemMatch : element in array
- $size : size of array

example :
**********
db.students.find({scores:{$all:[90,95]}}) // to show students with scores array containing both 90 and 95



UPDATE in DB :
----------------

db.collection.updateOne() // update at most a single document that match a specified filter even though multiple documents may match the specified filter.
db.collection.updateMany() // update all documents that match a specified filter.
db.collection.replaceOne() // replace a single document that match a specified filter with the specified replacement document


syntax:
********
db.collection.updateOne(filter, update, options)
db.collection.updateMany(filter, update, options)
db.collection.replaceOne(filter, replacement, options)

example:
**********
db.students.updateOne({name: "John"},{$set:{age:25}}) // update
db.students.updateMany({name: "John"},{$set:{age:25}}) // update
db.students.replaceOne({name: "John"},{name: "Om",age:22})



Update Operators:
-----------------
$set         : Sets the value of a field in a document.
$unset       : Removes the specified field from a document.
$addFields   : Adds new fields to documents. If the field already exists, it will overwrite the existing value.
$project     : Specifies the fields to include or exclude in the result documents.
$replaceRoot : Replaces the existing root document with the specified embedded document.
$replaceWith : Replaces the input document with the specified document.


Nesting :
----------------

example:
**********
{
    _id: ObjectId("64512vf5v40f5vvdv56cd"),
    name: "John",
    address: {
        street: "123 Main St",
        city: "New York",
        state: "NY",
        zip: "10001"
        }
}

to find :
**********
db.collection.find({name: "John", "address.city": "New York"})
db.collection.findOne({"address.state": "NY"})


DELETE in DB :
----------------
deleteOne :
db.collection.deleteOne(filter,options)

deleteMany :
db.collection.deleteMany(filter,options)

db.collection.drop() // delete all documents in the collection

db.dropDatabase() // delete database



PART : 2
==========
----------
==========




Mongoose :
==========
- A library that create a connection between MongoDB & Node JS Javascript Runtime Environment.
- It is a MongoDB object modeling tool designed to work in an asynchronous environment.
- It is ODM (Object Data Modeling ) library.
- It is used to interact with MongoDB database from Node JS application.
- It is used to create, read, update, delete data in MongoDB database from Node JS application
- It is used to create a schema for MongoDB database from Node JS application.

example to connect mongoose with js :
---------------------------------------

const mongoose = require("mongoose"); //! reqire mongoose

//! connect with mongodb
main()
  .then(() => {
    console.log("connected to database");
  })
  .catch((err) => console.log(err));

async function main() {
  await mongoose.connect("mongodb://127.0.0.1:27017/test");
}



Schema :
========
- A schema is a blueprint or a template that defines the structure of a MongoDB document.
- Schema defines the shape of the documnet within that collection.

define schema :
----------------

const userSchema = new mongoose.Schema({
    name: String,
    email: String,
    age: Number
    });


Schema Datatypes :
-------------------
- String : It is used to store string data type.
- Number : It is used to store number data type.
- Date : It is used to store date data type.
- Buffer : It is used to store binary data type.
- Boolean : It is used to store boolean data type.
- Object : It is used to store object data type.
- Array : It is used to store array data type.
- Mixed : It is used to store mixed data type.
- ObjectId : It is used to store ObjectId data type.
- Decimal128 : It is used to store decimal128 data type.
- Map : It is used to store map data type.
- Timestamp : It is used to store timestamp data type.



Model :
======
- A model is a class that is used to interact with the database.
- Model in mongoose is a class with which we construct document.

define:
--------
const User = mongoose.model('User', userSchema);



Insert :
========

* Insert One :
--------------

const user1 = new User({
    name: 'yash',
    email: 'yash@example.com',
    age: 25
});

user1.save()  // to save in DB


*Insert Many:
----------------

User.insertMany([
    { name: 'yash', email: 'yash@example.com', age: 25},
    { name: 'om', email: 'om23@example.com', age:21}
])
.then((res)=>{
    console.log(res);
})


Note :
++++++

- Mongoose uses Operation Buffering
- mongoose lets you start using your models immediately, without waiting for mongoose to establish a connection to MongoDB.




Find :
=======

Model.find() //return a Query Object

Model.find().exec() // return a promise

Model.find().then((res)=>{
    console.log(res);
    })


* Find One :
------------
Model.findOne()  // return single result


*find by Id :
----------------
Model.findById()  // return single result by id


Note : 
++++++
- Mongoose Queries are not promise, but they have a .then()



Update :
=========
Model.update() // return a Query Object


* update one :
----------------
Model.updateOne() // return a promise

* update Many :
----------------
Model.updateMany() // return a promise


* find one and update
----------------------
Model.findOneAndUpdate() // return a promise


* find by id and update
------------------------
Model.findByIdAndUpdate() // return a promise



Delete :
========

*delete one :
----------------
Model.deleteOne() // return a promise

*delete Many :
----------------
Model.deleteMany() // return a promise


*find by id and delete
------------------------
Model.findByIdAndDelete() // return a promise

*find one and delete
----------------------
Model.findOneAndDelete() // return a promise



Schema Validation :
====================
- Basically, Rules for schema
- It's used to validate the data before it's saved to the database.

ex :
----
const bookSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  author: {
    type: String,
  },
  price: {
    type: Number,
  },
});

SchemaType Options :
---------------------

1. required : true / false
   - Marks the field as required (mandatory).

2. default : value
   - Specifies a default value for the field if none is provided.

3. select : true / false
   - Whether to include the field in query results by default.

4. validate : function or object
   - Custom validation logic.
   - Can be a function or an object with `validator` and `message`.

5. get : function
   - Function to transform the value when retrieving it from the database.

6. set : function
   - Function to transform the value before saving it to the database.

7. immutable : true / false
   - Prevents the value from being changed after it is initially set.

8. transform : function
   - Function to alter the output during `.toObject()` or `.toJSON()` conversion.



example :

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true,
    set: v => v.toLowerCase(),
    get: v => v.charAt(0).toUpperCase() + v.slice(1),
  },
  age: {
    type: Number,
    default: 18,
    validate: {
      validator: v => v >= 0,
      message: props => `${props.value} is not a valid age!`
    },
    immutable: true
  },
  password: {
    type: String,
    select: false
  }
});


Note:
-----
- The validators are only triggered during insertion, not on updates.

-To enable validation during updates, use:

User.findByIdAndUpdate(id, updateData, { runValidators: true })



Custom Error :
==============
- You can define custom error messages in Mongoose validators using the `required`, `validate`, or other validation options.

example :

name: {
  type: String,
  required: [true, "Name field is required"]
}


Handling error :
================
- You can handle errors in Mongoose using the `catch` method of the promise returned by the `save` method.

user.save()
  .then((res) => {
    console.log(res);  // Success: logs saved document
  })
  .catch((err) => {
    console.log(err.errors.[field].properties.message); // Custom error message for 'category' field
  });





